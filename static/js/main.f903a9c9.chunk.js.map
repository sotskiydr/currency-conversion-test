{"version":3,"sources":["api/api-services.js","components/Header/Header.js","components/Converter/Converter.js","App.js","index.js"],"names":["key","query","a","axios","get","data","console","log","getOneCurrency","from","to","onConvert","amount","Header","useState","setData","useEffect","then","prevState","map","el","base","result","UAH","nanoid","Converter","currency","setCurrency","inputFrom","inputTo","optionFrom","optionTo","baseValue","setValue","getAllCurrency","Object","entries","results","getConvertData","action","values","handleChange","e","target","value","handleSelectChange","name","type","onChange","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAEMA,EAAM,+B,4CAEL,WAA8BC,GAA9B,iBAAAC,EAAA,+EAEoBC,IAAMC,IAAN,kDACsBH,EADtB,oBACuCD,IAH3D,uBAEKK,EAFL,EAEKA,KAFL,kBAKIA,GALJ,gCAOHC,QAAQC,IAAR,MAPG,0D,sBAWA,SAAeC,EAAtB,kC,4CAAO,qCAAAN,EAAA,gFAA+BO,EAA/B,KAAqCC,EAArC,uBAEoBP,IAAMC,IAAN,kDACsBK,EADtB,eACiCC,EADjC,oBAC+CV,IAHnE,uBAEKK,EAFL,EAEKA,KAFL,kBAKIA,GALJ,gCAOHC,QAAQC,IAAR,MAPG,0D,sBAWA,SAAeI,EAAtB,sC,4CAAO,WAAyBF,EAAMC,EAAIE,GAAnC,iBAAAV,EAAA,+EAEoBC,IAAMC,IAAN,gDACoBK,EADpB,eAC+BC,EAD/B,mBAC4CE,EAD5C,oBAC8DZ,IAHlF,uBAEKK,EAFL,EAEKA,KAFL,kBAKIA,GALJ,gCAOHC,QAAQC,IAAR,MAPG,0D,wCCKQM,EA3BA,WACb,MAAwBC,mBAAS,IAAjC,mBAAOT,EAAP,KAAaU,EAAb,KAeA,OAbAC,qBAAU,WACRR,EAAe,CAAC,MAAO,QAAQS,MAAK,SAACZ,GAAD,OAClCU,GAAQ,SAACG,GACP,MAAM,GAAN,mBAAWA,GAAX,CAAsBb,UAG1BG,EAAe,CAAC,MAAO,QAAQS,MAAK,SAACZ,GAAD,OAClCU,GAAQ,SAACG,GACP,MAAM,GAAN,mBAAWA,GAAX,CAAsBb,YAGzB,CAACU,IAGF,8BACE,6BACGV,EAAKc,KAAI,SAACC,GACT,OAAO,uCAAuBA,EAAGC,KAA1B,aAAmCD,EAAGE,OAAOC,MAApCC,uB,OC8GXC,EAlIG,WAChB,MAAgCX,mBAAS,IAAzC,mBAAOY,EAAP,KAAiBC,EAAjB,KACA,EAA8Bb,mBAAS,CACrCc,UAAW,GACXC,QAAS,GACTC,WAAY,MACZC,SAAU,QAJZ,mBAAOC,EAAP,KAAkBC,EAAlB,KAOAjB,qBAAU,YFTL,SAAP,mCEUIkB,CAAeF,EAAUF,YAAYb,MAAK,SAACZ,GACzC4B,GAAS,SAACf,GACR,OAAO,2BAAKA,GAAZ,IAAuBY,WAAYzB,EAAKgB,UAE1CM,EAAYQ,OAAOC,QAAQ/B,EAAKgC,eAEjC,CAACV,EAAaK,EAAUF,aAE3B,IAAMQ,EAAiB,SAAC7B,EAAMC,EAAIE,EAAQ2B,GACxC,MAAe,SAAXA,EACK5B,EAAUF,EAAMC,EAAIE,GAAQK,MAAK,SAACZ,GAAD,OACtC4B,GAAS,SAACf,GACR,OAAO,2BAAKA,GAAZ,IAAuBW,QAASM,OAAOK,OAAOnC,EAAKiB,QAAQ,WAIlD,OAAXiB,EACK5B,EAAUF,EAAMC,EAAIE,GAAQK,MAAK,SAACZ,GAAD,OACtC4B,GAAS,SAACf,GACR,OAAO,2BAAKA,GAAZ,IAAuBU,UAAWO,OAAOK,OAAOnC,EAAKiB,QAAQ,gBAHnE,GASImB,EAAe,SAACC,EAAGH,GACnBG,EAAEC,OAAOC,OAAS,IACP,SAAXL,IACFN,GAAS,SAACf,GACR,OAAO,2BAAKA,GAAZ,IAAuBU,UAAWc,EAAEC,OAAOC,WAE7CN,EACEN,EAAUF,WACVE,EAAUD,SACVW,EAAEC,OAAOC,MACTL,IAGW,OAAXA,IACFN,GAAS,SAACf,GACR,OAAO,2BAAKA,GAAZ,IAAuBW,QAASa,EAAEC,OAAOC,WAE3CN,EACEN,EAAUD,SACVC,EAAUF,WACVY,EAAEC,OAAOC,MACTL,MAKAM,EAAqB,SAACH,EAAGH,GAEzBN,EADO,SAAXM,EACa,SAACrB,GACR,OAAO,2BAAKA,GAAZ,IAAuBY,WAAYY,EAAEC,OAAOC,SAErC,SAAC1B,GACR,OAAO,2BAAKA,GAAZ,IAAuBa,SAAUW,EAAEC,OAAOC,WAIlD,OACE,iCACE,yCAEE,uBACEE,KAAK,aACLC,KAAK,SACLH,MAAOZ,EAAUJ,UACjBoB,SAAU,SAACN,GACTD,EAAaC,EAAG,cAItB,wBACEI,KAAK,OACLF,MAAOZ,EAAUF,WACjBkB,SAAU,SAACN,GACTG,EAAmBH,EAAG,SAJ1B,SAOGhB,EAASP,KAAI,YAAY,IAAVnB,EAAS,oBACvB,OACE,wBAAuB4C,MAAO5C,EAA9B,SACGA,GADUwB,oBAMnB,uCAEE,uBACEsB,KAAK,WACLC,KAAK,SACLH,MAAOZ,EAAUH,QACjBmB,SAAU,SAACN,GACTD,EAAaC,EAAG,YAItB,wBACEI,KAAK,KACLF,MAAOZ,EAAUD,SACjBiB,SAAU,SAACN,GACTG,EAAmBH,EAAG,OAJ1B,SAOGhB,EAASP,KAAI,YAAY,IAAVnB,EAAS,oBACvB,OACE,wBAAuB4C,MAAO5C,EAA9B,SACGA,GADUwB,oBAMnB,wBAAQuB,KAAK,SAAb,wBCpHSE,MATf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCHNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.f903a9c9.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst key = \"c872c33bcc-eb0433fc41-r7f371\";\n\nexport async function getAllCurrency(query) {\n  try {\n    const { data } = await axios.get(\n      `https://api.fastforex.io/fetch-all?from=${query}&api_key=${key}`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getOneCurrency([from, to]) {\n  try {\n    const { data } = await axios.get(\n      `https://api.fastforex.io/fetch-one?from=${from}&to=${to}&api_key=${key}`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function onConvert(from, to, amount) {\n  try {\n    const { data } = await axios.get(\n      `https://api.fastforex.io/convert?from=${from}&to=${to}&amount=${amount}&api_key=${key}`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n","import { getOneCurrency } from \"../../api/api-services\";\nimport { useEffect, useState } from \"react\";\nimport { nanoid } from \"nanoid\";\n\nconst Header = () => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    getOneCurrency([\"USD\", \"UAH\"]).then((data) =>\n      setData((prevState) => {\n        return [...prevState, data];\n      })\n    );\n    getOneCurrency([\"EUR\", \"UAH\"]).then((data) =>\n      setData((prevState) => {\n        return [...prevState, data];\n      })\n    );\n  }, [setData]);\n\n  return (\n    <div>\n      <ul>\n        {data.map((el) => {\n          return <li key={nanoid()}>{`${el.base}: ${el.result.UAH}`}</li>;\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default Header;\n","import { getAllCurrency, onConvert } from \"../../api/api-services\";\nimport { useEffect, useState } from \"react\";\nimport { nanoid } from \"nanoid\";\n\nconst Converter = () => {\n  const [currency, setCurrency] = useState([]);\n  const [baseValue, setValue] = useState({\n    inputFrom: \"\",\n    inputTo: \"\",\n    optionFrom: \"USD\",\n    optionTo: \"UAH\",\n  });\n\n  useEffect(() => {\n    getAllCurrency(baseValue.optionFrom).then((data) => {\n      setValue((prevState) => {\n        return { ...prevState, optionFrom: data.base };\n      });\n      setCurrency(Object.entries(data.results));\n    });\n  }, [setCurrency, baseValue.optionFrom]);\n\n  const getConvertData = (from, to, amount, action) => {\n    if (action === \"from\") {\n      return onConvert(from, to, amount).then((data) =>\n        setValue((prevState) => {\n          return { ...prevState, inputTo: Object.values(data.result)[0] };\n        })\n      );\n    }\n    if (action === \"to\") {\n      return onConvert(from, to, amount).then((data) =>\n        setValue((prevState) => {\n          return { ...prevState, inputFrom: Object.values(data.result)[0] };\n        })\n      );\n    }\n  };\n\n  const handleChange = (e, action) => {\n    if (e.target.value <= 0) return;\n    if (action === \"from\") {\n      setValue((prevState) => {\n        return { ...prevState, inputFrom: e.target.value };\n      });\n      getConvertData(\n        baseValue.optionFrom,\n        baseValue.optionTo,\n        e.target.value,\n        action\n      );\n    }\n    if (action === \"to\") {\n      setValue((prevState) => {\n        return { ...prevState, inputTo: e.target.value };\n      });\n      getConvertData(\n        baseValue.optionTo,\n        baseValue.optionFrom,\n        e.target.value,\n        action\n      );\n    }\n  };\n\n  const handleSelectChange = (e, action) => {\n    action === \"from\"\n      ? setValue((prevState) => {\n          return { ...prevState, optionFrom: e.target.value };\n        })\n      : setValue((prevState) => {\n          return { ...prevState, optionTo: e.target.value };\n        });\n  };\n\n  return (\n    <form>\n      <label>\n        From\n        <input\n          name=\"input-from\"\n          type=\"number\"\n          value={baseValue.inputFrom}\n          onChange={(e) => {\n            handleChange(e, \"from\");\n          }}\n        />\n      </label>\n      <select\n        name=\"from\"\n        value={baseValue.optionFrom}\n        onChange={(e) => {\n          handleSelectChange(e, \"from\");\n        }}\n      >\n        {currency.map(([key]) => {\n          return (\n            <option key={nanoid()} value={key}>\n              {key}\n            </option>\n          );\n        })}\n      </select>\n      <label>\n        To\n        <input\n          name=\"input-to\"\n          type=\"number\"\n          value={baseValue.inputTo}\n          onChange={(e) => {\n            handleChange(e, \"to\");\n          }}\n        />\n      </label>\n      <select\n        name=\"to\"\n        value={baseValue.optionTo}\n        onChange={(e) => {\n          handleSelectChange(e, \"to\");\n        }}\n      >\n        {currency.map(([key]) => {\n          return (\n            <option key={nanoid()} value={key}>\n              {key}\n            </option>\n          );\n        })}\n      </select>\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n};\n\nexport default Converter;\n","import \"./App.css\";\nimport Header from \"./components/Header/Header\";\nimport Converter from \"./components/Converter/Converter\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Converter />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}